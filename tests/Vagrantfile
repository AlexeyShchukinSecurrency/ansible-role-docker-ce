# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

current_dir = File.dirname(File.expand_path(__FILE__))
testcase_file = "#{current_dir}/vagrant_testcase.yml"
if File.exist?(testcase_file)
  vagrant_config = YAML.load_file("#{testcase_file}")
  vagrant_devs = ["/dev/sda", "/dev/sdb", "/dev/sdc"]
  Vagrant.configure("2") do |config|
    config.vm.box_check_update = true
    config.ssh.insert_key = false

    config.vm.define 'test-host' do |machine|
      machine.vm.box = vagrant_config['box']
      machine.vm.box_url = vagrant_config['box_url']
      machine.vagrant.plugins = "vagrant-vbguest"
      machine.vbguest.no_remote = true
      machine.vbguest.auto_update = vagrant_config['vbguest_update']
      machine.vm.network :forwarded_port, guest: 22, host: 2223, id: "ssh"
      machine.vm.network "private_network", ip: "192.168.56.21", virtualbox__intnet: true
      machine.vm.synced_folder ".", "/vagrant", disabled: true
      machine.vm.provider "virtualbox" do |vb|
        docker_disk = 'extra_disk/docker_disk.vdi'
        unless File.exist?(docker_disk)
          vb.customize ['createhd', '--filename', docker_disk, '--size', 5 * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', vagrant_config['storage_ctl'], '--port', vagrant_config['storage_port'], '--device', 0, '--type', 'hdd', '--medium', docker_disk]

        mem_divisor = 2
        cpu_divisor = 2
        host = RbConfig::CONFIG['host_os']
        if host =~ /darwin|bsd/
          cpus = `sysctl -n hw.ncpu`.to_i
          mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024
        elsif host =~ /linux/
          cpus = `nproc`.to_i
          mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024
        elsif host =~ /mswin|mingw/
          cpus = `wmic CPU Get NumberOfLogicalProcessors /Value`.strip.split('=')[1].to_i
          mem = `wmic ComputerSystem Get TotalPhysicalMemory /Value`.strip.split('=')[1].to_i / 1024 / 1024
        else
          cpus = 1
          mem = 2048
        end
    
        if cpus > 2
          cpus = cpus / cpu_divisor
        end

        if mem > 4096
          mem = mem / mem_divisor
        end
    
        vb.customize ["modifyvm", :id, "--memory", mem]
        vb.customize ["modifyvm", :id, "--cpus", cpus]      
      end
    end

    config.vm.define 'controller' do |machine|
      machine.vm.box = "centos/7"
      machine.vagrant.plugins = "vagrant-vbguest"
      machine.vbguest.auto_update = true
      machine.vbguest.no_remote = true
      machine.vm.synced_folder ".", "/vagrant", :mount_options => ["ro"]
      machine.vm.synced_folder "../", "/mnt/ansible-role-docker-ce", :mount_options => ["ro"]
      machine.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh"
      machine.vm.network "private_network", ip: "192.168.56.11", virtualbox__intnet: true

      # Prepare Ansible roles directory
      machine.vm.provision "shell",
        inline: "test -d /etc/ansible/roles/haxorof.docker-ce || \
          (mkdir -p /etc/ansible/roles && \
          ln -s /mnt/ansible-role-docker-ce /etc/ansible/roles/haxorof.docker-ce)"

      machine.vm.provision "shell",
        inline: "test -e /home/vagrant/.ssh/id_rsa || (mkdir -p /home/vagrant/.ssh && chmod 0700 /home/vagrant/.ssh && \
          curl https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant > /home/vagrant/.ssh/id_rsa && \
          chmod 0600 /home/vagrant/.ssh/id_rsa && chown -R vagrant:vagrant /home/vagrant/.ssh)"

      # Prepare
      machine.vm.provision "ansible_local" do |ansible|
        ansible.install_mode = "pip"
        ansible.compatibility_mode = "2.0"
        ansible.version = "2.5.9.0"
        ansible.playbook = vagrant_config['prep_yml']
        ansible.limit = "test-host"
        ansible.inventory_path = "hosts"
        ansible.config_file = "/vagrant/ansible.cfg"
        #ansible.raw_arguments = ["-vvv"]
        ansible.extra_vars = {
          lvm_device: "#{vagrant_devs[vagrant_config['storage_port']]}"
        }
      end
      # Test
      machine.vm.provision "ansible_local" do |ansible|
        ansible.install = false
        ansible.compatibility_mode = "2.0"
        ansible.playbook = vagrant_config['test_yml']
        ansible.limit = "test-host"
        ansible.inventory_path = "hosts"
        ansible.config_file = "/vagrant/ansible.cfg"
        ansible.extra_vars = {
          #docker_do_checks: "no",
          lvm_device: "#{vagrant_devs[vagrant_config['storage_port']]}"
        }
      end
    end 

  end
else
  puts "==> test: File does not exist: #{testcase_file}!"
end
