# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

current_dir = File.dirname(File.expand_path(__FILE__))
testcase_file = "#{current_dir}/vagrant_testcase.yml"
if File.exist?(testcase_file)
  vagrant_config = YAML.load_file("#{testcase_file}")
  vagrant_devs = ["/dev/sda", "/dev/sdb", "/dev/sdc"]

  Vagrant.configure("2") do |config|
    config.vm.box = vagrant_config['box']
    config.vm.box_url = vagrant_config['box_url']
    config.vm.box_check_update = true
    config.ssh.insert_key = false
    config.vbguest.auto_update = vagrant_config['vbguest_update']
    config.vbguest.no_remote = true
    config.vm.synced_folder ".", "/vagrant", :mount_options => ["ro"]
    config.vm.synced_folder "../", "/mnt/ansible-role-docker-ce", :mount_options => ["ro"]
    config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh"
    config.vm.provider "virtualbox" do |vb|
      vb.name = "docker-test"
      vb.memory = "2048"
      docker_disk = 'extra_disk/docker_disk.vdi'
      unless File.exist?(docker_disk)
        vb.customize ['createhd', '--filename', docker_disk, '--size', 5 * 1024]
      end
      vb.customize ['storageattach', :id, '--storagectl', vagrant_config['storage_ctl'], '--port', vagrant_config['storage_port'], '--device', 0, '--type', 'hdd', '--medium', docker_disk]
    end
    # Prepare Ansible roles directory
    config.vm.provision "shell",
      inline: "test -d /etc/ansible/roles/haxorof.docker-ce || \
        (mkdir -p /etc/ansible/roles && \
        ln -s /mnt/ansible-role-docker-ce /etc/ansible/roles/haxorof.docker-ce)"

    # Prepare box
    config.vm.provision "ansible_local" do |ansible|
      ansible.verbose = false
      ansible.install_mode = "pip"
      ansible.compatibility_mode = "2.0"
      ansible.version = "2.5.6"
      ansible.playbook = vagrant_config['prep_yml']
      ansible.limit = "test-host"
      ansible.inventory_path = "hosts"
      ansible.config_file = "/vagrant/ansible.cfg"
      ansible.extra_vars = {
        lvm_device: "#{vagrant_devs[vagrant_config['storage_port']]}"
      }
    end
    # Test storage config
    config.vm.provision "ansible_local" do |ansible|
      ansible.verbose = false
      ansible.install = false
      ansible.compatibility_mode = "2.0"
      ansible.playbook = vagrant_config['test_yml']
      ansible.limit = "test-host"
      ansible.inventory_path = "hosts"
      ansible.config_file = "/vagrant/ansible.cfg"
      ansible.extra_vars = {
        lvm_device: "#{vagrant_devs[vagrant_config['storage_port']]}"
      }
    end
  end
else
  puts "==> test: File does not exist: #{testcase_file}!"
end
